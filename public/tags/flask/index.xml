<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flask on Nicola Iarocci</title>
    <link>https://nicolaiarocci.com/tags/flask/</link>
    <description>Recent content in flask on Nicola Iarocci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Wed, 04 Feb 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nicolaiarocci.com/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How about a Sentinel for your Flask Application?</title>
      <link>https://nicolaiarocci.com/a-sentinel-for-your-flask-applications/</link>
      <pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/a-sentinel-for-your-flask-applications/</guid>
      <description>Flask-Sentinel is a OAuth2 Server implementation of the Resource Owner Password Credentials Grant pattern described in Section 1.3.3 of RFC 6749. It is powered by Flask-Oauthlib, Redis and MongoDB and is bundled as a Flask extension so it can be used to add OAuth2 capabilities to an existing application.
So what is the Resource Owner Password Credentials Grant pattern? According to the official RFC:
 The resource owner password credentials (i.</description>
    </item>
    
    <item>
      <title>Python and Flask Are Ridiculously Powerful</title>
      <link>https://nicolaiarocci.com/python-and-flask-are-ridiculously-powerful/</link>
      <pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/python-and-flask-are-ridiculously-powerful/</guid>
      <description>As a developer, I sometimes forget the power I yield. It&amp;#8217;s easy to forget that, when something doesn&amp;#8217;t work the way I&amp;#8217;d like, I have the power to change it.
 via Python and Flask Are Ridiculously Powerful.</description>
    </item>
    
    <item>
      <title>Flask-MimeRender v0.1.2</title>
      <link>https://nicolaiarocci.com/flask-mimerender-v0-1-2/</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/flask-mimerender-v0-1-2/</guid>
      <description>Grazie al contributo di Bruno Ripa, la versione 0.1.2 di Flask-MimeRender pubblicata oggi introduce il supporto per codici di stato HTTP arbitrari. Ho colto l&amp;#8217;occasione per uniformare il codice sorgente alle direttive PEP8 e per sistemare alcuni dettagli del package PyPI. Vi ricordo che potete contribuire voi stessi al progetto, direttamente su GitHub.</description>
    </item>
    
    <item>
      <title>Sviluppare una RESTful Web API con Python, Flask e MongoDB</title>
      <link>https://nicolaiarocci.com/sviluppare-una-restful-web-api-con-python-flask-e-mongodb/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/sviluppare-una-restful-web-api-con-python-flask-e-mongodb/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignright size-thumbnail wp-image-4867&#34; style=&#34;border: 0px;&#34; title=&#34;EuroPython 2012&#34; src=&#34;images/europython-logo-150x50.png?fit=150%2C50&#34; alt=&#34;EuroPython 2012&#34; srcset=&#34;http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/europython-logo.png?resize=150%2C50 150w, http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/europython-logo.png?resize=300%2C100 300w, http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/europython-logo.png?w=330 330w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; data-recalc-dims=&#34;1&#34; /&gt;La scorsa settimana a &lt;a title=&#34;EuroPython 2012&#34; href=&#34;https://ep2012.europython.eu&#34; target=&#34;_blank&#34;&gt;EuroPython 2012&lt;/a&gt; ho tenuto un talk intitolato &lt;a href=&#34;https://ep2012.europython.eu/conference/talks/sviluppare-una-restful-web-api-con-python-flask-e-mongodb&#34; target=&#34;_blank&#34;&gt;Sviluppare una RESTful Web API con Python, Flask e MongoDB&lt;/a&gt;. Mi ha fatto piacere riscontrare forte interesse sia per gli aspetti teorici dell&amp;#8217;architettura REST che per la loro implementazione pratica con strumenti quali Flask e MongoDB. In entrambe le sessioni inglese e italiana mi sono state rivolte molte domande, sia in occasione delle Q&amp;amp;A plenarie che nei successivi colloqui informali. Parecchi anche i commenti ed i suggerimenti, davvero utili ed apprezzati (a quanto pare non sono l&amp;#8217;unico che, forte di un background .NET, ha compiuto o sta per compiere il salto verso Python e il mondo open source).&lt;/p&gt;

&lt;p&gt;Soprattutto ho rilevato una forte curiosità su MongoDB, un database non-relazionale verso il quale sembra prevalere un atteggiamento  di generale timidezza: &amp;#8220;vorrei ma non oso&amp;#8221;, insomma. Per quanto riguarda Flask direi che ormai, nel vasto firmamento dei micro web framework, è una stella che brilla di luce propria.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flask MimeRender nel Python Package Index (PyPI)</title>
      <link>https://nicolaiarocci.com/flask-mimerender-e-nel-python-package-index-pypi/</link>
      <pubDate>Thu, 01 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/flask-mimerender-e-nel-python-package-index-pypi/</guid>
      <description>Un appunto veloce per segnalare che Flask MimeRender, il mio strumento RESTful per il rendering basato sul MIME Media-Type delle richieste HTTP (JSON, XML, HTML, ecc.), è ora presente su PyPI, il Python Package Index ufficiale.
 La pagina ufficiale di Flask MimeRender su PyPI  Tutto ciò significa che l&amp;#8217;installazione di Flask MimeRender su Windows, OSX e Linux è diventato più semplice:
pip install flask-mimerender Codice sorgente e istruzioni sono a vostra disposizione su GitHub, mentre per spiegazione approfondita ed esempio d&amp;#8217;uso vi rimando al mio articolo precedente: Una REST API che adatta le sue risposte al MIME Media-Type delle richieste HTTP.</description>
    </item>
    
    <item>
      <title>Una REST API che adatta le sue risposte al MIME Media-Type delle richieste HTTP</title>
      <link>https://nicolaiarocci.com/come-implementare-un-web-service-rest-che-adatta-le-risposte-al-mime-media-type-delle-richieste-http/</link>
      <pubDate>Fri, 03 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nicolaiarocci.com/come-implementare-un-web-service-rest-che-adatta-le-risposte-al-mime-media-type-delle-richieste-http/</guid>
      <description>&lt;p&gt;Da qualche tempo sto lavorando alla implementazione di una REST API. In linea generale e semplificando, una &lt;a title=&#34;Application programming interface&#34; href=&#34;http://it.wikipedia.org/wiki/Application_programming_interface&#34; target=&#34;_blank&#34;&gt;API&lt;/a&gt; è un servizio che espone alcune funzionalità, è accessibile via internet più o meno liberamente ed è, infine, utilizzabile non solo da persone fisiche ma anche e soprattutto da altre applicazioni. Un esempio di API è quella di Facebook, che consente a chiunque di creare applicazioni che interagiscono con gli utenti e le pagine Facebook. Già, se non ci fosse la API non esisterebbero i terribili giochini Facebook&amp;#8230;&lt;/p&gt;

&lt;p&gt;Una delle specifiche &lt;a title=&#34;REST&#34; href=&#34;http://it.wikipedia.org/wiki/Representational_State_Transfer&#34; target=&#34;_blank&#34;&gt;REST&lt;/a&gt; più importanti vuole che un servizio RESTful sia in grado di fornire dati in più formati, in modo tale da soddisfare il maggior numero possibile di utenti/applicazioni. Immaginiamo un servizio che fornisce i risultati delle partite del campionato di calcio. Supponiamo che arrivino tre richieste successive per lo stesso risultato: la prima potrebbe chiedere una risposta in formato XML, la seconda in JSON e la terza in HTML. Il  nostro servizio deve rispondere a tutte e tre le richieste, adattando il flusso di dati della risposta al formato di ognuna.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignright size-full wp-image-4402&#34; style=&#34;border-style: initial; border-color: initial; border-image: initial; border-width: 0px;&#34; title=&#34;Flask&#34; src=&#34;http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/flask.png?fit=300%2C117&#34; alt=&#34;Flask&#34; srcset=&#34;http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/flask.png?w=300 300w, http://i2.wp.com/nicolaiarocci.com/wp-content/uploads/flask.png?resize=150%2C58 150w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; data-recalc-dims=&#34;1&#34; /&gt;Nel mio caso la API che sto implementando supporta XML, JSON, HTML e testo puro. E&amp;#8217; scritta in Python (ma va!) e si appoggia all&amp;#8217;eccellente &lt;a title=&#34;Flask&#34; href=&#34;http://flask.pocoo.org/&#34; target=&#34;_blank&#34;&gt;Flask&lt;/a&gt; micro web framework. Per risolvere in maniera elegante il problema delle risposte multi-formato ho deciso di usare i &lt;a title=&#34;Python Decorators&#34; href=&#34;http://www.python.org/dev/peps/pep-0318/&#34; target=&#34;_blank&#34;&gt;decorator&lt;/a&gt;, una delle caratteristiche più interessanti di Python. Dopo un po&amp;#8217; di lavoro in proprio ho scoperto che qualcuno aveva già risolto il problema, per giunta con la stessa tecnica. &lt;a title=&#34;mimerender&#34; href=&#34;http://code.google.com/p/mimerender/&#34; target=&#34;_blank&#34;&gt;MimeRender&lt;/a&gt; di Martin Blech è un&amp;#8217;ottima soluzione, solo che è specifica per web.py (un altro web framework). La mia soluzione non disponeva di alcune opzioni interessanti che MimeRender include; ho deciso allora di scrivere un port di MimeRender per Flask, e di metterlo a disposizione del pubblico.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>